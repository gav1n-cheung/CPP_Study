#include <iostream>

/* 数组
 * 所谓数组就是一个集合，里面存放了相同类型的数据元素
 * 特点1:数组中的每个数据元素都是相同的数据类型
 * 特点2:数组是由连续的内存位置组成的。
 */
int main() {
    /* 一维数组
     * 一维数组定义的三种方式：
     * （1）数据类型 数组名[数组长度];
     * （2）数据类型 数组名[数组长度]={值1，值2，...};
     * （3）数据类型 数组名[]={值1，值2，...};
     */

    //第一种定义方法
    int arr[5];
    //通过下标给数组元素进行赋值
    arr[0] = 10;
    arr[1] = 20;
    arr[2] = 30;
    arr[3] = 40;
    arr[4] = 50;
    //通过下标访问数组元素
    std::cout << arr[1] << std::endl;

    //第二种定义方式,如果初始化时没有全部覆盖，则默认用0来填充数组
    int arr2[5] = {10, 20, 30, 40, 50};
    //利用循环输出数组
    for (int i = 0; i < 5; ++i) {
        std::cout << arr2[i] << std::endl;
    }

    //第三种定义方式,定义数组时必须要有数组的长度
    int arr3[] = {90, 80, 70, 60, 50, 40, 30, 20, 10};
    for (int i = 0; i < 9; ++i) {
        std::cout << arr3[i] << std::endl;
    }
    /* 一维数组数组名
     * 用途：
     * （1）可以统计整个数组在内存中的长度 sizeof(arr)
     * （2）可以获取数组再内存中的首地址 cout<<arr<<endl;
     */
    //(1)
    int array1[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::cout<<"整个数组占同内存空间为:"<< sizeof(array1)<<std::endl;
    std::cout<<"每个元素占同内存空间为:"<< sizeof(array1[0])<<std::endl;
    std::cout<<"数组元素个数为:"<< sizeof(array1)/sizeof(array1[0])<<std::endl;
    //(2)
    std::cout<<"数组首地址为："<<array1<<std::endl;
    std::cout<<"数组第一个元素的地址为:"<<&array1[0]<<std::endl;
    std::cout<<"数组第二个元素的地址为:"<<&array1[1]<<std::endl;
    //数组名是一个常量，不能进行赋值操作
    //array1=100;
    return 0;
}
