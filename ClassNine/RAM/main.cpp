#include <iostream>
//全局变量
int g_a=10;
int g_b=10;
const int c_g_a=10;


/* C++核心编程
 * 主要针对C++面向对象编程技术做详细讲解，探讨C++中的核心和精髓
 * 1、内存分区模型：
 *  C++程序在执行时，将内存大方向划分为4个区域：
 *  （1）代码区：存放函数体的二进制代码，由操作系统进行管理的
 *  （2）全局区：存放全局变量和静态变量以及常量
 *  （3）栈区：由编译器自动分配释放，存放函数的参数值，局部变量等
 *  （4）堆区：由程序员分配和释放，若程序员不释放，程序结束后由操作系统回收
 *
 *  内存四区意义：不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程
 */

/* 1.1 程序运行前：
 *  在程序编译后，生成了exe可执行程序，未执行程序前分为两个区域：
 *      代码区：
 *          存放CPU执行的机器指令
 *          代码区是**共享**的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可
 *          代码区是**只读**的，使其只读的原因是防止程序意外地修改了他的指令
 *      全局区：
 *          **全局变量**和**静态变量**存放在此
 *          全局区还包含了**常量**区，字符串常量和其他常量也存放在此(const修饰的全局常量和字符串常量)
 *          该区域的数据在程序结束后由操作系统释放
 */

int main() {
    //全局区
    //全局变量、静态变量、常量

    //创建普通局部变量
    int a = 10;
    int b = 10;
    std::cout << "局部变量a的地址为" << &a << std::endl;
    std::cout << "局部变量b的地址为" << &b << std::endl;
    std::cout << "全局变量a的地址为" << &g_a << std::endl;
    std::cout << "全局变量b的地址为" << &g_b << std::endl;

    //静态变量
    static int s_a=10;
    std::cout << "静态变量a的地址为" << &s_a << std::endl;

    //字符串常量
    std::cout<<"字符串常量的地址为"<<&"hello world"<<std::endl;

    //const修饰的变量
    //const修饰的全局变量，const修饰的全局变量
    std::cout<<"全局常量c_g_a的地址为"<<&c_g_a<<std::endl;

    const int c_l_a=10;
    std::cout<<"局部常量c_l_a的地址为"<<&c_l_a<<std::endl;
    return 0;
}

